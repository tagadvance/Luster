/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tagadvance.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Stream;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Tests for {@link DeferredException}.
 */
class DeferredExceptionTest {

	@Test
	void testCallable() {
		final var value = new DeferredException(Assertions::fail).callable(
			DeferredExceptionTest::call, () -> null).get();

		assertNull(value);
	}

	private static Void call() throws Exception {
		return null;
	}

	@Test
	void testCallableIsSuppressed() {
		final AtomicInteger i = new AtomicInteger();
		final var value = new DeferredException(e -> i.getAndIncrement()).callable(
			DeferredExceptionTest::callableThrowsException, Object::new).get();

		assertNotNull(value);
		assertEquals(1, i.get());
	}

	private static Objects callableThrowsException() throws Exception {
		throw new Exception();
	}

	@Test
	void testRunnable() {
		new DeferredException(Assertions::fail).runnable(DeferredExceptionTest::run).run();
	}

	private static void run() throws Exception {

	}

	@Test
	void testRunnableIsSuppressed() {
		final AtomicInteger i = new AtomicInteger();
		new DeferredException(e -> i.getAndIncrement()).runnable(
			DeferredExceptionTest::runnableThrowsException).run();

		assertEquals(1, i.get());
	}

	private static void runnableThrowsException() throws Exception {
		throw new Exception();
	}

	@Test
	void testAll() {
		final var deferredException = new DeferredException(Assertions::fail);
		Stream.of("/dev/random", "/dev/zero")
			.filter(deferredException.predicate(DeferredExceptionTest::filter,
				Boolean.TRUE::booleanValue))
			.map(deferredException.function(DeferredExceptionTest::function, () -> null))
			.forEach(deferredException.consumer(DeferredExceptionTest::consumer));
	}

	private static boolean filter(final Object o) throws Exception {
		return true;
	}

	private static Object function(final Object o) throws Exception {
		return new Object();
	}

	private static void consumer(final Object o) throws Exception {

	}

	@Test
	void testAllAreSuppressed() {
		final AtomicInteger i = new AtomicInteger();
		final var deferredException = new DeferredException(e -> i.getAndIncrement());
		Stream.of("/dev/random", "/dev/zero")
			.filter(deferredException.predicate(DeferredExceptionTest::filterThrowsException,
				Boolean.TRUE::booleanValue))
			.map(deferredException.function(DeferredExceptionTest::functionThrowsException))
			.forEach(deferredException.consumer(DeferredExceptionTest::consumerThrowsException));

		assertEquals(6, i.get());
	}

	private static boolean filterThrowsException(final Object o) throws Exception {
		throw new Exception();
	}

	private static Object functionThrowsException(final Object o) throws Exception {
		throw new Exception();
	}

	private static void consumerThrowsException(final Object o) throws Exception {
		throw new Exception();
	}


}
